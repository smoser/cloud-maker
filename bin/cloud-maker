#!/usr/bin/env ruby
require 'cloud-maker'

class CloudMakerCLI < Thor
  include Thor::Actions

  CONFIG_PATH = '~/.cloud-maker.yaml'

  def initialize(*args)
    super
    begin
      @global_options = YAML::load(File.open(File.expand_path(CONFIG_PATH)))
    rescue
      @global_options = {}
    end
  end

  map "--version" => :version, "-v" => :version

  desc "user_data [INSTANCE_CONFIG_YAML]", "Generate the Cloud Init user data for an instance described by INSTANCE_CONFIG_YAML"
  method_option :set,
    :alias => '-s',
    :type => :hash,
    :default => {},
    :desc => "Set parameters in the CloudMaker config"
  method_option :tags,
    :alias => '-t',
    :type => :hash,
    :default => {},
    :desc => "Set tags for EC2, merges with and overrides the tag property in the CloudMaker config"
  def user_data(instance_config_yaml)
    config = build_config(instance_config_yaml, options)
    say "User Data:".green
    puts config.to_user_data
  end

  desc "version", "Report the current version of CloudMaker"
  def version
    say "cloud-maker #{Gem::Specification.find_by_name('cloud-maker').version.version}"
  end

  desc "authorize_github", "Fetch an API authorization token from github."
  def authorize_github
    say "This will generate an OAuth token for use when fetching #{"github://".cyan} urls. It will be saved in #{CONFIG_PATH.cyan}."
    say "You can remove this authorization from the GitHub interface if needed."
    say "Your password will not be saved to disk.".green
    user = ask("What is your GitHub #{"username".cyan}?")
    state = Termios.getattr(STDIN)
    new_settings = state.dup
    new_settings.c_lflag &= ~(Termios::ECHO | Termios::ICANON)
    new_settings.c_cc[Termios::VMIN] = 1
    Termios.setattr(STDIN, Termios::TCSANOW, new_settings)
    password = ask("What is your GitHub #{"password".cyan}?")
    Termios.setattr(STDIN, Termios::TCSANOW, state)
    puts
    begin
      response = JSON.parse(RestClient::Request.new(
        :method => "POST",
        :url => 'https://api.github.com/authorizations',
        :user => user,
        :password => password,
        :payload => {
          :note => "CloudMaker",
          :note_url => "https://github.com/airbnb/cloud-maker",
          :scopes => ["repo"]
        }.to_json,
        :headers => {
          :content_type => 'application/json'
        }
      ).execute)
      @global_options['github_token'] = response["token"]
      save_options!
      say "Your GitHub credentials have been successfully updated.".green
    rescue Exception => e
      say e.to_s.red
      say "Your GitHub credentials could not be updated.".red
    end
  end

  desc "terminate [AWS_INSTANCE_ID]", "Terminate the specified AWS instance"
  method_option :aws_access_key_id,
    :desc => "Your AWS access key id",
    :default => ENV['AWS_ACCESS_KEY_ID'],
    :required => true
  method_option :aws_secret_access_key,
    :desc => "Your AWS secret access key",
    :default => ENV['AWS_SECRET_ACCESS_KEY'],
    :required => true
  def terminate(aws_instance_id)
    info(aws_instance_id)

    puts

    if yes?("Are you sure you wish to terminate this instance?".red + " (y/n)")
      cloud_maker = get_cloudmaker(options)
      cloud_maker.terminate(aws_instance_id)
      say "The instance was terminated."
    else
      say "Termination aborted."
    end
  end

  desc "info [AWS_INSTANCE_ID]", "Display config info about the specified AWS instance"
  method_option :aws_access_key_id,
    :desc => "Your AWS access key id",
    :default => ENV['AWS_ACCESS_KEY_ID'],
    :required => true
  method_option :aws_secret_access_key,
    :desc => "Your AWS secret access key",
    :default => ENV['AWS_SECRET_ACCESS_KEY'],
    :required => true
  def info(aws_instance_id)
    cloud_maker = get_cloudmaker(options)

    info = cloud_maker.info(aws_instance_id)

    print_config_hash(info[:cloud_config])
    puts
    say "Original instance state:".green
    print_colored_hash(info[:instance])
  end

  desc "launch [INSTANCE_CONFIG_YAML]", "Launch a new EC2 instance as described by INSTANCE_CONFIG_YAML"
  method_option :aws_access_key_id,
    :desc => "Your AWS access key id",
    :default => ENV['AWS_ACCESS_KEY_ID'],
    :required => true
  method_option :aws_secret_access_key,
    :desc => "Your AWS secret access key",
    :default => ENV['AWS_SECRET_ACCESS_KEY'],
    :required => true
  method_option :set,
    :alias => '-s',
    :type => :hash,
    :default => {},
    :desc => "Set parameters in the CloudMaker config"
  method_option :tags,
    :alias => '-t',
    :type => :hash,
    :default => {},
    :desc => "Set tags for EC2, merges with and overrides the tag property in the CloudMaker config"
  method_option :yes,
    :alias => '-y',
    :type => :boolean,
    :default => false,
    :desc => "Answer yes to any confirmation prompts and accept defaults automatically."
  def launch(instance_config_yaml)
    puts "--------------------------------------------------------------------------------".green
    puts "Launching new EC2 instance"
    puts "--------------------------------------------------------------------------------\n".green

    config = build_config(instance_config_yaml, options)

    print_config_hash(config.to_hash)

    if options.yes || yes?("Launch a new EC2 instance with the options above? (y/n)")
      cloud_maker = get_cloudmaker(options)

      instance = cloud_maker.launch(config)
      puts
      say "Successfully launched new EC2 instance: ".green + instance.id.magenta
      puts
      # print_colored_hash(CloudMaker::EC2.instance_to_hash(instance)) # FIXME: why didn't original code use the cloud_maker above
      print_colored_hash(cloud_maker.instance_to_hash(instance))
    else
      say "Launch aborted!".red
    end
  end

  private
  def print_colored_hash(hash, color=:cyan)
    print_table hash.map {|key, val|
      [key.to_s.dup.send(color), colorize_inspection_string(val.to_s)]
    }
  end

  def colorize_inspection_string(string)
    string = string.dup
    string.gsub!(/([\{\}\[\]])/, '\1'.magenta)
    string.gsub!(/([\,])/, '\1'.yellow)
    string.gsub!(/([\:\"\']?[0-9a-zA-Z_\:]*[\"\']?)=>/, '\1'.cyan + '=>')
    string
  end

  def print_config_hash(hash)
    puts
    say "CloudInit configuration:".green
    print_colored_hash hash['cloud-init']
    puts

    if (!hash['include'].empty?)
      say 'Include URLs:'.green
      hash['include'].each do |url|
        puts url
      end
      puts
    end

    say "CloudMaker configuration:".green
    print_colored_hash hash['cloud-maker']
    puts

    say "Configuration files:".green
    [hash['extra-options']['config_path'], *hash['import']].each do |file|
      puts file
    end
    puts
  end

  def save_options!
    path = File.expand_path(CONFIG_PATH)
    File.open(path, 'w+') {|f| f.write(@global_options.to_yaml)}
  end

  def build_config(instance_config_yaml, options)
    begin
      config = CloudMaker::Config.from_yaml(instance_config_yaml, 'import_ec2' => true, 'github_token' => @global_options['github_token'])
    rescue CloudMaker::Config::GitHubContentNotFound => e
      say e.to_s.red
      if @global_options['github_token']
        say "You do have GitHub OAuth configured, however you can redo the configuration if the current OAuth token is no longer valid.".yellow
      else
        say "You don't have a GitHub OAuth token configured, if this is a private repo doing so is necessary.".yellow
      end
      if yes?("Would you like to configure OAuth and retry now?")
        authorize_github
        retry
      else
        exit 1
      end
    rescue CloudMaker::Config::ContentNotFound => e
      say e.to_s.red
      exit 1
    end

    options.set.each_pair {|key, val| config[key] = val}

    config['tags'] ||= {}
    config['tags'].merge!(options.tags)

    if !config.missing_values.empty?
      say "Before an instance can be launched we need a few more values to be specified.".yellow
      say "Currently missing: #{config.missing_values.map{|key| key.cyan}.join(', ')}"
      puts

      config.missing_values.each do |key|
        config[key] = ENV[key] if ENV[key]
      end

      config.missing_values.each do |key|
        if (config.options[key]["description"])
          say config.options[key]["description"]
        end

        if config.options[key]["default"]
          if options[:yes]
            config[key] = config.options[key]["default"]
          else
            config[key] = ask "Please choose a value for #{key.cyan} [#{config.options[key]["default"]}]:"
          end
        else
          config[key] = ask "Please choose a value for #{key.cyan}:"
        end

        if (config[key].empty? && config.options[key]["default"])
          config[key] = config.options[key]["default"]
        end
      end
    end

    config
  end

  def get_cloudmaker(options)
    backend = ENV["CLOUD_MAKER_BACKEND"]
    if backend.empty? or backend == "ec2"
      archiver_info = {
        :aws_access_key_id => options.aws_access_key_id,
        :aws_secret_access_key => options.aws_secret_access_key,
      }
      cloud_maker = CloudMaker::EC2.new(
        :aws_access_key_id => options.aws_access_key_id,
        :aws_secret_access_key => options.aws_secret_access_key,
      )
    elsif backend == "lxc"
      cloud_maker = CloudMaker::LXC.new()
    else
      raise RuntimeError.new("invalid backend (CLOUD_MAKER_BACKEND) '#{backend}'")
    end

    cloud_maker
  end

end

CloudMakerCLI.start

# vi: ts=2 expandtab
